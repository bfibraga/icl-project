PARSER_BEGIN(Parser)


/** ID lister. */
package src.parser;

import src.astnodes.*;
import src.astnodes.control.*;
import src.astnodes.operations.arithmetic.*;
import src.astnodes.functions.*;
import src.astnodes.operations.relational.*;
import src.misc.*;
import src.value.*;
import java.util.*;

public class Parser {}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}

TOKEN :
{
  < INT : (["0"-"9"]) + >
  |
  < FLOAT : <INT> "." (["0"-"9"])* | "." <INT> >
  |
  < Num: <INT> | <FLOAT>>
  |
  < BOOL : ("true" | "false") >
  |
  < SETVAL : "->">
  |
  < QUOTE : "'">
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < MOD : "%">
  |
  < POW : "^">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < LBRACKET : "{">
  |
  < RBRACKET : "}">
  |
  < LET : "let">
  |
  < EQ : "=">
  |
  < SEMCOL: ";" >
  |
  < COMMA : "," >
  |
  < IF : "if">
  |
  < ELIF : "elif">
  |
  < ELSE : "else">
  |
  < MATCH : "match">
  |
  < DDOT : ":">
  |
  < DEFAULTCASE : "_">
  |
  < GT : ">">
  |
  < GEQT : ">=">
  |
  < LT : "<">
  |
  < LEQT : "<=">
  |
  < AND : "and">
  |
  < OR : "or">
  |
  < PRINT : "print">
  |
  < PRINTLN : "println">
  |
  < EXIT : "exit">
  |
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >

}

ASTNode Start():
{
    ASTNode t;
}
{
   t = Seq() <SEMCOL>
   { return t; }
}

ASTNode Seq():
{
    Token n;
    ASTNode t1, t2;
}
{
    t1 = SeqE() (<COMMA> t2 = SeqE() { t1 = new ASTSeq(t1,t2); })*
    { return t1; }
}

ASTNode SeqE():
{
    Token n;
    ASTNode t1, t2;
}
{
    t1 = BoolAdd() (<SETVAL> t2 = BoolAdd() { t1 = new ASTAssign(t1,t2); })*
    { return t1; }
}

ASTNode BoolAdd() :
{
    Token n;
    ASTNode t1, t2;
}
{
    t1 = BoolMult() (<OR> t2 = BoolMult() { t1 = new ASTOr(t1,t2); })*
    { return t1; }
}

ASTNode BoolMult() :
{
    Token n;
    ASTNode t1, t2;
}
{
    t1 = RelOps() (<AND> t2 = RelOps() { t1 = new ASTAnd(t1,t2); })*
    { return t1; }
}

ASTNode RelOps() :
{
    Token op;
    ASTNode t1, t2;
}
{
    t1 = Exp() (( op= <GT> | op = <GEQT> | op = <LT> | op = <LEQT> | op = <EQ> ) t2 = Exp()
    {
        if (op.kind == GT)
            t1 = new ASTGrt(t1,t2);
        else if (op.kind == GEQT)
            t1 = new ASTGrtEq(t1,t2);
        else if (op.kind == LT)
            t1 = new ASTLwt(t1,t2);
        else if (op.kind == LEQT)
            t1 = new ASTLwtEq(t1,t2);
        else if (op.kind == EQ)
            t1 = new ASTEq(t1,t2);
    })?
    { return t1; }
}

ASTNode Exp() :
{
    Token op;
    ASTNode t1, t2;
}
{
     t1=Term() ( ( op=<PLUS> | op=<MINUS> ) t2=Term() 
                 {
         if (op.kind == PLUS)
             t1 = new ASTPlus(t1,t2);
         else  t1 = new ASTSub(t1,t2);
     }
               ) *
     { return t1; } 
}

ASTNode Term() :
{
    Token op;
    ASTNode t1, t2;
}
{
     t1 = Fact() ( ( op=<TIMES> | op=<DIV> | op=<MOD> | op=<POW>) t2 = Term()
 		 {
       if (op.kind == TIMES)
           t1 = new ASTTimes(t1,t2);
       else if (op.kind == DIV)
           t1 = new ASTDiv(t1,t2);
       else if (op.kind == MOD)
           t1 = new ASTMod(t1,t2);
       else if (op.kind == POW)
           t1 = new ASTPow(t1,t2);

}
		)?
     { return t1; } 
}


ASTNode Fact() :
{
    Token n;
    ASTNode t;
}
{
   (
      n=<INT> { t = new ASTNum(Integer.parseInt(n.image)); }
    | n=<BOOL> { t = new ASTBool(Boolean.parseBoolean(n.image)); }
    | { StringBuilder result = new StringBuilder(); } <QUOTE> ( n=<Id> { result.append(n.image).append(" "); })+ <QUOTE>
    {
        result.deleteCharAt(result.length()-1);
        t = new ASTStr(result.toString());
    }
    | n=<Id> { t = new ASTId(n.image); }
    | ("-" t = Fact() { t = new ASTNeg(t); })
    | <LPAR> t=BoolAdd() <RPAR>
    | <LBRACKET>
        {
            List<Bind<String, ASTNode>> l = new ArrayList<>();
            ASTNode b;
        }
        ( <LET> n = <Id> <EQ> t = BoolAdd() <SEMCOL> { l.add(new Bind<>(n.image, t)); })*
            b = Seq()
            { t = new ASTDef(l, b); }
      <RBRACKET>
    |
    {
        ASTNode ci, bt, be;
    }
    <IF> ci = BoolAdd() <LBRACKET>
        bt = Seq()
    <RBRACKET> <ELSE> <LBRACKET> be = Seq() <RBRACKET>
    { t = new ASTIfElse(ci, bt, be); }
   | {
        Token v;
        ASTNode cond, c, d;
        Map<Value, ASTNode> cases = new HashMap<>();
     }
     <MATCH> cond = BoolAdd() <LBRACKET>
         ( v = <INT> <DDOT> c = Seq() { cases.put(new Int(Integer.parseInt(v.image)), c); } <SEMCOL> )*
         <DEFAULTCASE> <DDOT> d = Seq()
     <RBRACKET>
     { t = new ASTMatch(cond, cases, d); }
   | { List<ASTNode> l = new ArrayList<>(); }<PRINT> <LPAR> t = BoolAdd() { l.add(t); } ( <COMMA> t = BoolAdd() { l.add(t); })* <RPAR> { t = new ASTPrint(l); }
   | { List<ASTNode> l = new ArrayList<>(); }<PRINTLN> <LPAR> t = BoolAdd() { l.add(t); } ( <COMMA> t = BoolAdd() { l.add(t); })* <RPAR> { t = new ASTPrintln(l); }
   )
   { return t; }
}





















