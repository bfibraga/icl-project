/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
/** ID lister. */
package src.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INT = 8;
  /** RegularExpression Id. */
  int FLOAT = 9;
  /** RegularExpression Id. */
  int Num = 10;
  /** RegularExpression Id. */
  int BOOL = 11;
  /** RegularExpression Id. */
  int ARR = 12;
  /** RegularExpression Id. */
  int STRUCT = 13;
  /** RegularExpression Id. */
  int ASSIGN = 14;
  /** RegularExpression Id. */
  int QUOTE = 15;
  /** RegularExpression Id. */
  int PLUS = 16;
  /** RegularExpression Id. */
  int MINUS = 17;
  /** RegularExpression Id. */
  int TIMES = 18;
  /** RegularExpression Id. */
  int MOD = 19;
  /** RegularExpression Id. */
  int POW = 20;
  /** RegularExpression Id. */
  int DIV = 21;
  /** RegularExpression Id. */
  int LPAR = 22;
  /** RegularExpression Id. */
  int RPAR = 23;
  /** RegularExpression Id. */
  int LBRACKET = 24;
  /** RegularExpression Id. */
  int RBRACKET = 25;
  /** RegularExpression Id. */
  int LSBRACKET = 26;
  /** RegularExpression Id. */
  int RSBRACKET = 27;
  /** RegularExpression Id. */
  int LET = 28;
  /** RegularExpression Id. */
  int MUT = 29;
  /** RegularExpression Id. */
  int EQ = 30;
  /** RegularExpression Id. */
  int EQREL = 31;
  /** RegularExpression Id. */
  int SEMCOL = 32;
  /** RegularExpression Id. */
  int COMMA = 33;
  /** RegularExpression Id. */
  int DOT = 34;
  /** RegularExpression Id. */
  int IF = 35;
  /** RegularExpression Id. */
  int ELIF = 36;
  /** RegularExpression Id. */
  int ELSE = 37;
  /** RegularExpression Id. */
  int MATCH = 38;
  /** RegularExpression Id. */
  int VB = 39;
  /** RegularExpression Id. */
  int WHILE = 40;
  /** RegularExpression Id. */
  int FOR = 41;
  /** RegularExpression Id. */
  int IN = 42;
  /** RegularExpression Id. */
  int DDOT = 43;
  /** RegularExpression Id. */
  int DEFAULTCASE = 44;
  /** RegularExpression Id. */
  int GT = 45;
  /** RegularExpression Id. */
  int GEQT = 46;
  /** RegularExpression Id. */
  int LT = 47;
  /** RegularExpression Id. */
  int LEQT = 48;
  /** RegularExpression Id. */
  int DIFF = 49;
  /** RegularExpression Id. */
  int NOT = 50;
  /** RegularExpression Id. */
  int AND = 51;
  /** RegularExpression Id. */
  int OR = 52;
  /** RegularExpression Id. */
  int XOR = 53;
  /** RegularExpression Id. */
  int NEW = 54;
  /** RegularExpression Id. */
  int REF = 55;
  /** RegularExpression Id. */
  int FUN = 56;
  /** RegularExpression Id. */
  int LEN = 57;
  /** RegularExpression Id. */
  int PRINT = 58;
  /** RegularExpression Id. */
  int PRINTLN = 59;
  /** RegularExpression Id. */
  int PRINTF = 60;
  /** RegularExpression Id. */
  int EXIT = 61;
  /** RegularExpression Id. */
  int STR = 62;
  /** RegularExpression Id. */
  int Id = 63;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int WithinComment = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 7>",
    "<INT>",
    "<FLOAT>",
    "<Num>",
    "<BOOL>",
    "\"arr\"",
    "\"struct\"",
    "\"->\"",
    "\"\\\'\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"%\"",
    "\"^\"",
    "\"/\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"let\"",
    "\"mut\"",
    "\"=\"",
    "\"==\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"if\"",
    "\"elif\"",
    "\"else\"",
    "\"match\"",
    "\"|\"",
    "\"while\"",
    "\"for\"",
    "\"in\"",
    "\":\"",
    "\"_\"",
    "\">\"",
    "\">=\"",
    "\"<\"",
    "\"<=\"",
    "\"!=\"",
    "\"!\"",
    "\"and\"",
    "\"or\"",
    "\"xor\"",
    "\"new\"",
    "\"val\"",
    "\"fn\"",
    "\"#\"",
    "\"print\"",
    "\"println\"",
    "\"printf\"",
    "\"exit\"",
    "<STR>",
    "<Id>",
  };

}
