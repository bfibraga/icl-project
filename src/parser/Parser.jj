PARSER_BEGIN(Parser)


/** ID lister. */
package src.parser;

import src.astnodes.*;
import src.astnodes.control.*;
import src.astnodes.operations.arithmetic.*;
import src.misc.*;
import java.util.*;

public class Parser {}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}

TOKEN :
{
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
  |
  < Num: (["0"-"9"]) + >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < MOD : "%">
  |
  < POW : "^">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < LBRACKET : "{">
  |
  < RBRACKET : "}">
  |
  < LET : "let ">
  |
  < EQ : "=">
  |
  < SEMCOL: ";" >
  |
  < COMMA : "," >
  |
  < IF : "if ">
  |
  < ELIF : "elif ">
  |
  < ELSE : "else ">
  |
  < MATCH : "match ">
  |
  < DDOT : ":">
  |
  < DEFAULTCASE : "_">
}

ASTNode Start():
{
    ASTNode t;
}
{
   t = Exp() <SEMCOL>
   { return t; }
}

ASTNode Exp() :
{
    Token op;
    ASTNode t1, t2;
}
{
     t1=Term() ( ( op=<PLUS> | op=<MINUS> ) t2=Term() 
                 {
         if (op.kind == PLUS)
             t1 = new ASTPlus(t1,t2);
         else  t1 = new ASTSub(t1,t2);
     }
               ) *
     { return t1; } 
}

ASTNode Term() :
{
    Token op;
    ASTNode t1, t2;
}
{
     t1 = Fact() ( ( op=<TIMES> | op=<DIV> | op=<MOD> | op=<POW>) t2 = Term()
 		 {
       if (op.kind == TIMES)
           t1 = new ASTTimes(t1,t2);
       else if (op.kind == DIV)
           t1 = new ASTDiv(t1,t2);
       else if (op.kind == MOD)
           t1 = new ASTMod(t1,t2);
       else if (op.kind == POW)
           t1 = new ASTPow(t1,t2);

}
		)?
     { return t1; } 
}


ASTNode Fact() :
{
    Token n;
    ASTNode t;
}
{
   (
      n=<Num> { t = new ASTNum(Integer.parseInt(n.image)); }
    | n=<Id> { t = new ASTId(n.image); }
    | ("-" t = Fact() { t = new ASTNeg(t); })
    | <LPAR> t=Exp() <RPAR>
    | <LBRACKET>
        {
            List<Bind<String, ASTNode>> l = new ArrayList<>();
            ASTNode b;
        }
        ( <LET> n = <Id> <EQ> t = Exp() <SEMCOL> { l.add(new Bind<>(n.image, t)); })*
            b = Exp()
            { t = new ASTDef(l, b); }
      <RBRACKET>
    |
    {
        ASTNode ci, bt, be;
    }
    <IF> ci = Exp() <LBRACKET>
        bt = Exp()
    <RBRACKET> <ELSE> <LBRACKET> be = Exp() <RBRACKET>
    { t = new ASTIfElse(ci, bt, be);}
   | {
        Token v;
        ASTNode cond, c, d;
        Map<Integer, ASTNode> cases = new HashMap<>();
     }
     <MATCH> cond = Exp() <LBRACKET>
         ( v = <Num> <DDOT> c = Exp() { cases.put(Integer.parseInt(v.image), c); } <COMMA>)*
         <DEFAULTCASE> <DDOT> d = Exp()
     <RBRACKET>
     { t = new ASTMatch(cond, cases, d); }
   )
   { return t; }
}





















